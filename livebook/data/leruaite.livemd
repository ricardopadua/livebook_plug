<!-- livebook:{"persist_outputs":true} -->

# Livebook Plug

## What is livebook ?

Livebook is an amazing tools in elixir, your purpose is to create interactive documents and also write, execute and explain code elixir in document like a jupyter notebook for python, this document could share with other developers for interactive together, the livebook supports tables, graphics, text formating and other ways to visualization data, now that we explain a little bit about what is livebook we gonna  think one application elixir that is running in other host, wouldn't it be pretty good if we could execute this application in that livebook ? this is possible if we connecting node that livebook in node that application.

## What is node in Elixir ?

Elixir code after compiled it run in the Erlang Virtual Machine (BEAM), elixir takes advantage of BEAM features. That said, node in erlang is a running instance of Erlang runtime environment that enables creation and commnunication of processes in a distributed system, for identify the current node in a distributed system, execute node.self you could see more about node in [docs](https://hexdocs.pm/elixir/1.12/Node.html)

```elixir
Node.self()
```

<!-- livebook:{"output":true} -->

```
:broker@broker
```

como exemplo fiz um simples select em um contexto de Persons criado em uma aplicação Phoenix

<!-- livebook:{"break_markdown":true} -->

![](images/erlang_node.png)

```elixir
Broker.Repo.get!(Broker.Persons.Person, 1)
```

<!-- livebook:{"output":true} -->

```
%Broker.Persons.Person{
  __meta__: #Ecto.Schema.Metadata<:loaded, "persons">,
  id: 1,
  description: "owner",
  name: "Lara ",
  inserted_at: ~N[2023-05-20 14:53:42],
  updated_at: ~N[2023-05-20 14:53:42]
}
```

é importante entender que caso não existe um node criado com o nome definido no host de destino, não será possível conectar.

<!-- livebook:{"break_markdown":true} -->

````
version: "3.8"
services:
  broker:
    container_name: broker
    build: ./broker/
    ports:
      - "5000:5000"
    volumes:
      - ./broker:/app
    hostname: broker
    networks:
      - "live-net"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: livedb
      ERLANG_COOKIE: "leruaite_secret"
  livebook:
    image: 'livebook/livebook:0.6.3' 
    container_name: livebook
    hostname: livebook
    ports:
      - '8432:8432'
    networks:
      - "live-net"
    environment:
      LIVEBOOK_COOKIE: "leruaite_secret"
      LIVEBOOK_TOKEN_ENABLED: "true"
      LIVEBOOK_PASSWORD: "leruaitepassword"
      LIVEBOOK_DEFAULT_RUNTIME: "attached:broker@broker:leruaite_secret"
      LIVEBOOK_PORT: 8432
    restart: always
    volumes:
      - './livebook/data:/data'

  db:
    image: 'postgres:13.0-alpine' 
    container_name: livedb
    hostname: livedb
    ports:
      - '5432:5432'
    networks:
      - "live-net"
    restart: always
    environment:
      POSTGRES_HOST: livedb
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: broker
      PGDATA: /tmp
    volumes:
      - './postgres/data:/var/lib/postgresql/data'


networks:
  live-net:
    name: live-net
    driver: bridge
    ```
````

<!-- livebook:{"break_markdown":true} -->

````
FROM elixir:1.13.4

RUN mix local.hex --force \
  && mix archive.install --force hex phx_new 1.6.11 \
  && apt-get update \
  && curl -sL https://deb.nodesource.com/setup_16.x | bash \
  && apt-get install -y apt-utils \
  && apt-get install -y nodejs \
  && apt-get install -y build-essential \
  && apt-get install -y inotify-tools \
  && mix local.rebar --force

ENV APP_HOME /app
RUN mkdir -p $APP_HOME
WORKDIR $APP_HOME

EXPOSE 5000

CMD ["mix", "phx.server"]
```
````

<!-- livebook:{"break_markdown":true} -->

```
docker-compose up --build -d
docker exec -it broker iex --name broker@broker --cookie leruaite_secret -S mix
```

<!-- livebook:{"break_markdown":true} -->

Observe que essa configuração é somente para exemplo e ajustes de segurança deverão ser feitos para que seja viavel rodar em ambientes de maneira segura, quando possível leia a documentação do livebook e sempre coloque suas variaveis de ambiente em um .env ou vault.

<!-- livebook:{"break_markdown":true} -->

![](images/Captura%20de%20Tela%202022-08-07%20a%CC%80s%2000.42.46.png)

<!-- livebook:{"break_markdown":true} -->

![](images/Captura%20de%20Tela%202022-08-07%20a%CC%80s%2000.43.12.png)

<!-- livebook:{"break_markdown":true} -->

também é possível salvar de maneira automagica essa documentação no repositório desejado.
